{"version":3,"file":"static/js/12.4d15d17b.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/is-buffer/index.js","../node_modules/style-to-object/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/index.mjs","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","parse","require","StyleToObject","iterator","output","hasIterator","len","stringifyPosition","point","index","VFileMessage","place","origin","parts","super","undefined","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","joined","_len","segments","_key","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","data","messages","history","stored","map","includes","assertNonEmpty","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","_len2","_key2","middleware","called","wrapped","_len3","parameters","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","plugin","plugins","entry","isPlainObj","doc","vfile","assertParser","newable","String","assertCompiler","assertNode","compile","Promise","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","all","children","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","document","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","element","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","d","combined","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","any","anyFactory","propsFactory","CONTINUE","EXIT","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","concat","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","tab","space","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","props","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","types","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","writingSuggestions","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","React","ReactIs","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","commas","v","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehype","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","PropTypes"],"sourceRoot":""}